const PRECOMPUTED_INDEXES: [([u8; 8], [u8; 8], [u8; 8]); 81] = [
    (
        [1, 2, 3, 4, 5, 6, 7, 8],
        [9, 18, 27, 36, 45, 54, 63, 72],
        [1, 2, 9, 10, 11, 18, 19, 20],
    ),
    (
        [0, 2, 3, 4, 5, 6, 7, 8],
        [10, 19, 28, 37, 46, 55, 64, 73],
        [0, 2, 9, 10, 11, 18, 19, 20],
    ),
    (
        [0, 1, 3, 4, 5, 6, 7, 8],
        [11, 20, 29, 38, 47, 56, 65, 74],
        [0, 1, 9, 10, 11, 18, 19, 20],
    ),
    (
        [0, 1, 2, 4, 5, 6, 7, 8],
        [12, 21, 30, 39, 48, 57, 66, 75],
        [4, 5, 12, 13, 14, 21, 22, 23],
    ),
    (
        [0, 1, 2, 3, 5, 6, 7, 8],
        [13, 22, 31, 40, 49, 58, 67, 76],
        [3, 5, 12, 13, 14, 21, 22, 23],
    ),
    (
        [0, 1, 2, 3, 4, 6, 7, 8],
        [14, 23, 32, 41, 50, 59, 68, 77],
        [3, 4, 12, 13, 14, 21, 22, 23],
    ),
    (
        [0, 1, 2, 3, 4, 5, 7, 8],
        [15, 24, 33, 42, 51, 60, 69, 78],
        [7, 8, 15, 16, 17, 24, 25, 26],
    ),
    (
        [0, 1, 2, 3, 4, 5, 6, 8],
        [16, 25, 34, 43, 52, 61, 70, 79],
        [6, 8, 15, 16, 17, 24, 25, 26],
    ),
    (
        [0, 1, 2, 3, 4, 5, 6, 7],
        [17, 26, 35, 44, 53, 62, 71, 80],
        [6, 7, 15, 16, 17, 24, 25, 26],
    ),
    (
        [10, 11, 12, 13, 14, 15, 16, 17],
        [0, 18, 27, 36, 45, 54, 63, 72],
        [0, 1, 2, 10, 11, 18, 19, 20],
    ),
    (
        [9, 11, 12, 13, 14, 15, 16, 17],
        [1, 19, 28, 37, 46, 55, 64, 73],
        [0, 1, 2, 9, 11, 18, 19, 20],
    ),
    (
        [9, 10, 12, 13, 14, 15, 16, 17],
        [2, 20, 29, 38, 47, 56, 65, 74],
        [0, 1, 2, 9, 10, 18, 19, 20],
    ),
    (
        [9, 10, 11, 13, 14, 15, 16, 17],
        [3, 21, 30, 39, 48, 57, 66, 75],
        [3, 4, 5, 13, 14, 21, 22, 23],
    ),
    (
        [9, 10, 11, 12, 14, 15, 16, 17],
        [4, 22, 31, 40, 49, 58, 67, 76],
        [3, 4, 5, 12, 14, 21, 22, 23],
    ),
    (
        [9, 10, 11, 12, 13, 15, 16, 17],
        [5, 23, 32, 41, 50, 59, 68, 77],
        [3, 4, 5, 12, 13, 21, 22, 23],
    ),
    (
        [9, 10, 11, 12, 13, 14, 16, 17],
        [6, 24, 33, 42, 51, 60, 69, 78],
        [6, 7, 8, 16, 17, 24, 25, 26],
    ),
    (
        [9, 10, 11, 12, 13, 14, 15, 17],
        [7, 25, 34, 43, 52, 61, 70, 79],
        [6, 7, 8, 15, 17, 24, 25, 26],
    ),
    (
        [9, 10, 11, 12, 13, 14, 15, 16],
        [8, 26, 35, 44, 53, 62, 71, 80],
        [6, 7, 8, 15, 16, 24, 25, 26],
    ),
    (
        [19, 20, 21, 22, 23, 24, 25, 26],
        [0, 9, 27, 36, 45, 54, 63, 72],
        [0, 1, 2, 9, 10, 11, 19, 20],
    ),
    (
        [18, 20, 21, 22, 23, 24, 25, 26],
        [1, 10, 28, 37, 46, 55, 64, 73],
        [0, 1, 2, 9, 10, 11, 18, 20],
    ),
    (
        [18, 19, 21, 22, 23, 24, 25, 26],
        [2, 11, 29, 38, 47, 56, 65, 74],
        [0, 1, 2, 9, 10, 11, 18, 19],
    ),
    (
        [18, 19, 20, 22, 23, 24, 25, 26],
        [3, 12, 30, 39, 48, 57, 66, 75],
        [3, 4, 5, 12, 13, 14, 22, 23],
    ),
    (
        [18, 19, 20, 21, 23, 24, 25, 26],
        [4, 13, 31, 40, 49, 58, 67, 76],
        [3, 4, 5, 12, 13, 14, 21, 23],
    ),
    (
        [18, 19, 20, 21, 22, 24, 25, 26],
        [5, 14, 32, 41, 50, 59, 68, 77],
        [3, 4, 5, 12, 13, 14, 21, 22],
    ),
    (
        [18, 19, 20, 21, 22, 23, 25, 26],
        [6, 15, 33, 42, 51, 60, 69, 78],
        [6, 7, 8, 15, 16, 17, 25, 26],
    ),
    (
        [18, 19, 20, 21, 22, 23, 24, 26],
        [7, 16, 34, 43, 52, 61, 70, 79],
        [6, 7, 8, 15, 16, 17, 24, 26],
    ),
    (
        [18, 19, 20, 21, 22, 23, 24, 25],
        [8, 17, 35, 44, 53, 62, 71, 80],
        [6, 7, 8, 15, 16, 17, 24, 25],
    ),
    (
        [28, 29, 30, 31, 32, 33, 34, 35],
        [0, 9, 18, 36, 45, 54, 63, 72],
        [28, 29, 36, 37, 38, 45, 46, 47],
    ),
    (
        [27, 29, 30, 31, 32, 33, 34, 35],
        [1, 10, 19, 37, 46, 55, 64, 73],
        [27, 29, 36, 37, 38, 45, 46, 47],
    ),
    (
        [27, 28, 30, 31, 32, 33, 34, 35],
        [2, 11, 20, 38, 47, 56, 65, 74],
        [27, 28, 36, 37, 38, 45, 46, 47],
    ),
    (
        [27, 28, 29, 31, 32, 33, 34, 35],
        [3, 12, 21, 39, 48, 57, 66, 75],
        [31, 32, 39, 40, 41, 48, 49, 50],
    ),
    (
        [27, 28, 29, 30, 32, 33, 34, 35],
        [4, 13, 22, 40, 49, 58, 67, 76],
        [30, 32, 39, 40, 41, 48, 49, 50],
    ),
    (
        [27, 28, 29, 30, 31, 33, 34, 35],
        [5, 14, 23, 41, 50, 59, 68, 77],
        [30, 31, 39, 40, 41, 48, 49, 50],
    ),
    (
        [27, 28, 29, 30, 31, 32, 34, 35],
        [6, 15, 24, 42, 51, 60, 69, 78],
        [34, 35, 42, 43, 44, 51, 52, 53],
    ),
    (
        [27, 28, 29, 30, 31, 32, 33, 35],
        [7, 16, 25, 43, 52, 61, 70, 79],
        [33, 35, 42, 43, 44, 51, 52, 53],
    ),
    (
        [27, 28, 29, 30, 31, 32, 33, 34],
        [8, 17, 26, 44, 53, 62, 71, 80],
        [33, 34, 42, 43, 44, 51, 52, 53],
    ),
    (
        [37, 38, 39, 40, 41, 42, 43, 44],
        [0, 9, 18, 27, 45, 54, 63, 72],
        [27, 28, 29, 37, 38, 45, 46, 47],
    ),
    (
        [36, 38, 39, 40, 41, 42, 43, 44],
        [1, 10, 19, 28, 46, 55, 64, 73],
        [27, 28, 29, 36, 38, 45, 46, 47],
    ),
    (
        [36, 37, 39, 40, 41, 42, 43, 44],
        [2, 11, 20, 29, 47, 56, 65, 74],
        [27, 28, 29, 36, 37, 45, 46, 47],
    ),
    (
        [36, 37, 38, 40, 41, 42, 43, 44],
        [3, 12, 21, 30, 48, 57, 66, 75],
        [30, 31, 32, 40, 41, 48, 49, 50],
    ),
    (
        [36, 37, 38, 39, 41, 42, 43, 44],
        [4, 13, 22, 31, 49, 58, 67, 76],
        [30, 31, 32, 39, 41, 48, 49, 50],
    ),
    (
        [36, 37, 38, 39, 40, 42, 43, 44],
        [5, 14, 23, 32, 50, 59, 68, 77],
        [30, 31, 32, 39, 40, 48, 49, 50],
    ),
    (
        [36, 37, 38, 39, 40, 41, 43, 44],
        [6, 15, 24, 33, 51, 60, 69, 78],
        [33, 34, 35, 43, 44, 51, 52, 53],
    ),
    (
        [36, 37, 38, 39, 40, 41, 42, 44],
        [7, 16, 25, 34, 52, 61, 70, 79],
        [33, 34, 35, 42, 44, 51, 52, 53],
    ),
    (
        [36, 37, 38, 39, 40, 41, 42, 43],
        [8, 17, 26, 35, 53, 62, 71, 80],
        [33, 34, 35, 42, 43, 51, 52, 53],
    ),
    (
        [46, 47, 48, 49, 50, 51, 52, 53],
        [0, 9, 18, 27, 36, 54, 63, 72],
        [27, 28, 29, 36, 37, 38, 46, 47],
    ),
    (
        [45, 47, 48, 49, 50, 51, 52, 53],
        [1, 10, 19, 28, 37, 55, 64, 73],
        [27, 28, 29, 36, 37, 38, 45, 47],
    ),
    (
        [45, 46, 48, 49, 50, 51, 52, 53],
        [2, 11, 20, 29, 38, 56, 65, 74],
        [27, 28, 29, 36, 37, 38, 45, 46],
    ),
    (
        [45, 46, 47, 49, 50, 51, 52, 53],
        [3, 12, 21, 30, 39, 57, 66, 75],
        [30, 31, 32, 39, 40, 41, 49, 50],
    ),
    (
        [45, 46, 47, 48, 50, 51, 52, 53],
        [4, 13, 22, 31, 40, 58, 67, 76],
        [30, 31, 32, 39, 40, 41, 48, 50],
    ),
    (
        [45, 46, 47, 48, 49, 51, 52, 53],
        [5, 14, 23, 32, 41, 59, 68, 77],
        [30, 31, 32, 39, 40, 41, 48, 49],
    ),
    (
        [45, 46, 47, 48, 49, 50, 52, 53],
        [6, 15, 24, 33, 42, 60, 69, 78],
        [33, 34, 35, 42, 43, 44, 52, 53],
    ),
    (
        [45, 46, 47, 48, 49, 50, 51, 53],
        [7, 16, 25, 34, 43, 61, 70, 79],
        [33, 34, 35, 42, 43, 44, 51, 53],
    ),
    (
        [45, 46, 47, 48, 49, 50, 51, 52],
        [8, 17, 26, 35, 44, 62, 71, 80],
        [33, 34, 35, 42, 43, 44, 51, 52],
    ),
    (
        [55, 56, 57, 58, 59, 60, 61, 62],
        [0, 9, 18, 27, 36, 45, 63, 72],
        [55, 56, 63, 64, 65, 72, 73, 74],
    ),
    (
        [54, 56, 57, 58, 59, 60, 61, 62],
        [1, 10, 19, 28, 37, 46, 64, 73],
        [54, 56, 63, 64, 65, 72, 73, 74],
    ),
    (
        [54, 55, 57, 58, 59, 60, 61, 62],
        [2, 11, 20, 29, 38, 47, 65, 74],
        [54, 55, 63, 64, 65, 72, 73, 74],
    ),
    (
        [54, 55, 56, 58, 59, 60, 61, 62],
        [3, 12, 21, 30, 39, 48, 66, 75],
        [58, 59, 66, 67, 68, 75, 76, 77],
    ),
    (
        [54, 55, 56, 57, 59, 60, 61, 62],
        [4, 13, 22, 31, 40, 49, 67, 76],
        [57, 59, 66, 67, 68, 75, 76, 77],
    ),
    (
        [54, 55, 56, 57, 58, 60, 61, 62],
        [5, 14, 23, 32, 41, 50, 68, 77],
        [57, 58, 66, 67, 68, 75, 76, 77],
    ),
    (
        [54, 55, 56, 57, 58, 59, 61, 62],
        [6, 15, 24, 33, 42, 51, 69, 78],
        [61, 62, 69, 70, 71, 78, 79, 80],
    ),
    (
        [54, 55, 56, 57, 58, 59, 60, 62],
        [7, 16, 25, 34, 43, 52, 70, 79],
        [60, 62, 69, 70, 71, 78, 79, 80],
    ),
    (
        [54, 55, 56, 57, 58, 59, 60, 61],
        [8, 17, 26, 35, 44, 53, 71, 80],
        [60, 61, 69, 70, 71, 78, 79, 80],
    ),
    (
        [64, 65, 66, 67, 68, 69, 70, 71],
        [0, 9, 18, 27, 36, 45, 54, 72],
        [54, 55, 56, 64, 65, 72, 73, 74],
    ),
    (
        [63, 65, 66, 67, 68, 69, 70, 71],
        [1, 10, 19, 28, 37, 46, 55, 73],
        [54, 55, 56, 63, 65, 72, 73, 74],
    ),
    (
        [63, 64, 66, 67, 68, 69, 70, 71],
        [2, 11, 20, 29, 38, 47, 56, 74],
        [54, 55, 56, 63, 64, 72, 73, 74],
    ),
    (
        [63, 64, 65, 67, 68, 69, 70, 71],
        [3, 12, 21, 30, 39, 48, 57, 75],
        [57, 58, 59, 67, 68, 75, 76, 77],
    ),
    (
        [63, 64, 65, 66, 68, 69, 70, 71],
        [4, 13, 22, 31, 40, 49, 58, 76],
        [57, 58, 59, 66, 68, 75, 76, 77],
    ),
    (
        [63, 64, 65, 66, 67, 69, 70, 71],
        [5, 14, 23, 32, 41, 50, 59, 77],
        [57, 58, 59, 66, 67, 75, 76, 77],
    ),
    (
        [63, 64, 65, 66, 67, 68, 70, 71],
        [6, 15, 24, 33, 42, 51, 60, 78],
        [60, 61, 62, 70, 71, 78, 79, 80],
    ),
    (
        [63, 64, 65, 66, 67, 68, 69, 71],
        [7, 16, 25, 34, 43, 52, 61, 79],
        [60, 61, 62, 69, 71, 78, 79, 80],
    ),
    (
        [63, 64, 65, 66, 67, 68, 69, 70],
        [8, 17, 26, 35, 44, 53, 62, 80],
        [60, 61, 62, 69, 70, 78, 79, 80],
    ),
    (
        [73, 74, 75, 76, 77, 78, 79, 80],
        [0, 9, 18, 27, 36, 45, 54, 63],
        [54, 55, 56, 63, 64, 65, 73, 74],
    ),
    (
        [72, 74, 75, 76, 77, 78, 79, 80],
        [1, 10, 19, 28, 37, 46, 55, 64],
        [54, 55, 56, 63, 64, 65, 72, 74],
    ),
    (
        [72, 73, 75, 76, 77, 78, 79, 80],
        [2, 11, 20, 29, 38, 47, 56, 65],
        [54, 55, 56, 63, 64, 65, 72, 73],
    ),
    (
        [72, 73, 74, 76, 77, 78, 79, 80],
        [3, 12, 21, 30, 39, 48, 57, 66],
        [57, 58, 59, 66, 67, 68, 76, 77],
    ),
    (
        [72, 73, 74, 75, 77, 78, 79, 80],
        [4, 13, 22, 31, 40, 49, 58, 67],
        [57, 58, 59, 66, 67, 68, 75, 77],
    ),
    (
        [72, 73, 74, 75, 76, 78, 79, 80],
        [5, 14, 23, 32, 41, 50, 59, 68],
        [57, 58, 59, 66, 67, 68, 75, 76],
    ),
    (
        [72, 73, 74, 75, 76, 77, 79, 80],
        [6, 15, 24, 33, 42, 51, 60, 69],
        [60, 61, 62, 69, 70, 71, 79, 80],
    ),
    (
        [72, 73, 74, 75, 76, 77, 78, 80],
        [7, 16, 25, 34, 43, 52, 61, 70],
        [60, 61, 62, 69, 70, 71, 78, 80],
    ),
    (
        [72, 73, 74, 75, 76, 77, 78, 79],
        [8, 17, 26, 35, 44, 53, 62, 71],
        [60, 61, 62, 69, 70, 71, 78, 79],
    ),
];
const SUDOKU_VALUES: [u16; 9] = [1, 2, 4, 8, 16, 32, 64, 128, 256];
const SUDOKU_MAX: u16 = 511;
const OPTION_COUNT_CACHE: [u8; SUDOKU_MAX as usize + 1] = [
    0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
    4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9,
];

#[derive(Clone)]
struct SudokuEmpty {
    data: [u8; 81],
    end: usize,
}
impl SudokuEmpty {
    fn new() -> SudokuEmpty {
        let mut data: [u8; 81] = [0; 81];
        for (i, data_i) in data.iter_mut().enumerate() {
            *data_i = i as u8;
        }
        SudokuEmpty { data, end: 81 }
    }
    #[inline(never)]
    fn remove(&mut self, square: u8) {
        if let Ok(pos) = self.data[..self.end].binary_search(&square) {
            self.end -= 1;
            for i in pos..self.end {
                self.data[i] = self.data[i + 1];
            }
        }
    }
}

#[derive(Clone)]
struct Solver {
    to_explore: SudokuEmpty,
    options: [u16; 81],
}

impl Solver {
    fn new(sudoku: [u8; 81]) -> Solver {
        let to_explore: SudokuEmpty = SudokuEmpty::new();
        let mut solver = Solver {
            to_explore,
            options: [SUDOKU_MAX; 81],
        };
        for (i, item) in sudoku.iter().enumerate() {
            if *item != 0 {
                solver.generate(i, *item as usize);
            }
        }
        solver
    }

    fn hidden_singles(&mut self, square: usize) -> bool {
        let mut processed_value = self.options[square];
        let (rows, columns, boxes) = PRECOMPUTED_INDEXES[square];
        let row_total: u16 = SUDOKU_MAX
            - (self.options[rows[7] as usize]
                | self.options[rows[6] as usize]
                | self.options[rows[5] as usize]
                | self.options[rows[4] as usize]
                | self.options[rows[3] as usize]
                | self.options[rows[2] as usize]
                | self.options[rows[1] as usize]
                | self.options[rows[0] as usize]);
        match OPTION_COUNT_CACHE[row_total as usize] {
            0 => {}
            1 => {
                if processed_value & row_total != 0 {
                    processed_value &= row_total;
                } else {
                    return false;
                }
            }
            _ => {
                return false;
            }
        }
        let column_total: u16 = SUDOKU_MAX
            - (self.options[columns[7] as usize]
                | self.options[columns[6] as usize]
                | self.options[columns[5] as usize]
                | self.options[columns[4] as usize]
                | self.options[columns[3] as usize]
                | self.options[columns[2] as usize]
                | self.options[columns[1] as usize]
                | self.options[columns[0] as usize]);
        match OPTION_COUNT_CACHE[column_total as usize] {
            0 => {}
            1 => {
                if processed_value & column_total != 0 {
                    processed_value &= column_total;
                } else {
                    return false;
                }
            }
            _ => {
                return false;
            }
        }
        let box_total: u16 = SUDOKU_MAX
            - (self.options[boxes[7] as usize]
                | self.options[boxes[6] as usize]
                | self.options[boxes[5] as usize]
                | self.options[boxes[4] as usize]
                | self.options[boxes[3] as usize]
                | self.options[boxes[2] as usize]
                | self.options[boxes[1] as usize]
                | self.options[boxes[0] as usize]);
        match OPTION_COUNT_CACHE[box_total as usize] {
            0 => {}
            1 => {
                if processed_value & box_total != 0 {
                    processed_value &= box_total;
                } else {
                    return false;
                }
            }
            _ => {
                return false;
            }
        }
        self.options[square] = processed_value;
        true
    }

    fn generate(&mut self, square: usize, value: usize) -> bool {
        let processed_value = SUDOKU_VALUES[value - 1];
        let (rows, columns, boxes) = PRECOMPUTED_INDEXES[square];
        for row in rows.iter() {
            self.options[*row as usize] &= SUDOKU_MAX - processed_value;
        }
        for column in columns.iter() {
            self.options[*column as usize] &= SUDOKU_MAX - processed_value;
        }
        for cbox in boxes.iter() {
            self.options[*cbox as usize] &= SUDOKU_MAX - processed_value;
        }
        self.options[square] = processed_value;
        self.to_explore.remove(square as u8);
        true
    }
    #[inline(never)]
    fn process(&mut self, routes: &mut Vec<Solver>) -> bool {
        let mut values: Vec<u8> = Vec::with_capacity(9);
        loop {
            let mut min_length = 20;
            let mut min_pos = 0;
            let mut x: usize = 0;
            while x < self.to_explore.end {
                let pos = self.to_explore.data[x] as usize;
                if !self.hidden_singles(pos) {
                    return false;
                }
                let option = self.options[pos];
                let length = OPTION_COUNT_CACHE[option as usize];
                if length < min_length {
                    match length {
                        0 => return false,
                        1 => {
                            for (i, item) in SUDOKU_VALUES.iter().enumerate() {
                                if option == *item {
                                    if !self.generate(pos, i + 1) {
                                        return false;
                                    }
                                    break;
                                }
                            }
                            x = 0;
                            if min_pos > pos {
                                min_pos -= 1;
                            }
                        }
                        _ => {
                            min_length = length;
                            min_pos = pos;
                            x += 1;
                        }
                    };
                } else {
                    x += 1;
                };
            }
            if min_length != 20 {
                values.clear();
                let options = self.options[min_pos];
                for (i, item) in SUDOKU_VALUES.iter().enumerate() {
                    if options & *item != 0 {
                        values.push(i as u8 + 1);
                    }
                }
                if values.is_empty() {
                    return false;
                }
                let item = values.pop().unwrap();
                for value in values.iter() {
                    let mut clone = self.clone();
                    if clone.generate(min_pos, *value as usize) {
                        routes.push(clone);
                    }
                }
                if !self.generate(min_pos, item as usize) {
                    return false;
                }
            } else {
                return true;
            }
        }
    }
    fn get_result(&self) -> [u8; 81] {
        let mut solution: [u8; 81] = [0; 81];
        for (i, option) in self.options.iter().enumerate() {
            for (x, value) in SUDOKU_VALUES.iter().enumerate() {
                if option == value {
                    solution[i] = x as u8 + 1;
                    break;
                }
            }
        }
        solution
    }
}
#[inline(never)]
pub fn solve(sudoku: [u8; 81]) -> [u8; 81] {
    let mut routes: Vec<Solver> = vec![Solver::new(sudoku)];
    routes.reserve(32);
    while !routes.is_empty() {
        let mut route = routes.pop().unwrap();
        let result = route.process(&mut routes);
        if result {
            return route.get_result();
        }
    }
    panic!("Empty routes, but still unsolved");
}
